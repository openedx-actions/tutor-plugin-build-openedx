#------------------------------------------------------------------------------
# Build and push a Docker image constisting of
#   - edx-platform
#   - custom theme repository
#   - any additional Python requirements that were previously added with
#     openedx-actions/tutor-plugin-build-openedx-add-requirement
#
# see
#  - https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
#  - https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
#  - https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
#------------------------------------------------------------------------------
name: Open edX Tutor k8s build openedx
description: 'Use Tutor to build a Docker container of openedx, and upload to AWS ECR'
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  aws-ecr-repository:
    description: 'The name of the repository inside your AWS Elastic Container Registry (ECR) in which the newly created container will be uploaded and tagged. Defaults to "openedx"'
    required: false
    default: 'openedx'
  openedx-repository:
    description: 'The web url of the repository that holds the openedx code. This should only be set when using a forked version of openedx. Defaults to an empty string, which uses the tutor default'
    required: false
    default: ''
  openedx-version:
    description: 'The version of openedx to deploy. This corresponds to a branch or tag name in the openedx repository. Defaults to an empty string, which uses the tutor default'
    required: false
    default: ''
outputs:
  docker-container-url:
    description: 'The URL of the AWS ECR Docker container that was created and uploaded'
    value: ${{ steps.docker-image.outputs.uri }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3.5.2

    - name: Set up Docker Buildx
      id: setup-docker
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.7.0

    - name: Create the AWS ECR repository
      id: create-repository
      uses: cookiecutter-openedx/aws-ecr-create@v0.1.1
      with:
        aws-ecr-repository: ${{ inputs.aws-ecr-repository }}

    - name: Intialize environment variables
      id: init-env
      shell: bash
      run: |
        echo "AWS_ECR_REGISTRY_OPENEDX=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "AWS_ECR_REPOSITORY_OPENEDX=${{ inputs.aws-ecr-repository }}" >> $GITHUB_ENV
        echo "REPOSITORY_TAG_OPENEDX=$TUTOR_VERSION-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Initialize Docker image URI
      id: init-docker-image
      shell: bash
      run: |
        echo "DOCKER_IMAGE_OPENEDX=${AWS_ECR_REGISTRY_OPENEDX}/${AWS_ECR_REPOSITORY_OPENEDX}:${REPOSITORY_TAG_OPENEDX}" >> $GITHUB_ENV

    - name: Render Tutor Config
      id: tutor-config-save
      shell: bash
      run: tutor config save --set DOCKER_IMAGE_OPENEDX=${DOCKER_IMAGE_OPENEDX}

    - name: Set Tutor-dependent environment variables
      shell: bash
      run: |
        echo "THEMES_PATH=$(tutor config printroot)/env/build/openedx/themes" >> $GITHUB_ENV
        echo "PLUGINS_PATH=$(tutor config printroot)/env/build/openedx/requirements" >> $GITHUB_ENV

    - name: ls the theme folder
      id: ls-theme-folder
      shell: bash
      run: ls $THEMES_PATH -lha

    - name: ls the requirements folder
      id: ls-requirements-folder
      shell: bash
      run: ls $PLUGINS_PATH -lha

    - name: ensure that we have a private.txt
      id: touch-private-txt
      shell: bash
      run: touch $PLUGINS_PATH/private.txt

    - name: cat private.txt to console
      id: cat-private-txt
      shell: bash
      run: cat $PLUGINS_PATH/private.txt

    - name: Build the image
      id: tutor-build-image
      shell: bash
      run: |
        tutor images build ${{ inputs.openedx-repository != '' && format('-a EDX_PLATFORM_REPOSITORY={0}', inputs.openedx-repository) || '' }} \
          ${{ inputs.openedx-version != '' && format('-a EDX_PLATFORM_VERSION={0}', inputs.openedx-version) || '' }} openedx

    - name: Push the image
      id: docker-push-image
      shell: bash
      run: ${{ github.action_path }}/scripts/upload-to-aws-ecr.sh

    - name: Docker image:tag
      id: docker-image
      shell: bash
      run: |
        echo "::set-output name=uri::$(echo $DOCKER_IMAGE_OPENEDX)"
